#include <stdio.h>
#include <time.h>
#define INF 99999

void bellmanFord(int v, int cost[20][20], int dist[20], int n, int res[20][20]) {
    for (int i = 1; i <= n; i++) {
        dist[i] = cost[v][i];
    }

    for (int i = 1; i <= n; i++) {
        res[1][i] = dist[i];
    }

    for (int k = 2; k <= n - 1; k++) {
        int tt[20];
        for (int i = 1; i <= n; i++) {
            tt[i] = dist[i];
        }

        for (int u = 1; u <= n; u++) {
            if (u == v) continue;
            for (int i = 1; i <= n; i++) {
                if (cost[i][u] == INF || i == u)
                    continue;
                if (tt[u] > dist[i] + cost[i][u]) {
                    tt[u] = dist[i] + cost[i][u];
                }
            }
        }

        for (int i = 1; i <= n; i++) {
            dist[i] = tt[i];
            res[k][i] = dist[i];
        }
    }
}

int main() {
    clock_t s, e;
    s = clock();
    int n, edges, cost[20][20], dist[20], res[20][20];

    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &edges);

    // Initialize cost matrix
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i == j) cost[i][j] = 0;
            else cost[i][j] = INF;
        }
    }

    printf("Enter edges in format: source destination weight\n");
    for (int i = 0; i < edges; i++) {
        int u, v, w;
        scanf("%d%d%d", &u, &v, &w);
        cost[u][v] = w;
    }

    int v;
    printf("Enter the source vertex: ");
    scanf("%d", &v);

    bellmanFord(v, cost, dist, n, res);

    printf("\nK vs dist table:\n");
    printf("K\t");
    for (int i = 1; i <= n; i++) {
        printf("%d\t", i);
    }
    printf("\n");

    for (int k = 1; k <= n - 1; k++) {
        printf("%d\t", k);
        for (int i = 1; i <= n; i++) {
            if (res[k][i] == INF)
                printf("INF\t");
            else
                printf("%d\t", res[k][i]);
        }
        printf("\n");
    }

    printf("\nFinal Shortest distances from vertex %d:\n", v);
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INF)
            printf("Vertex %d : INF\n", i);
        else
            printf("Vertex %d : %d\n", i, dist[i]);
    }

    e = clock();
    printf("\nCPU Time: %lf\n", (double)(e - s) / CLOCKS_PER_SEC);
    return 0;
}
