#include <stdio.h>
#include <limits.h>

int matrixChainMultiplication(int arr[], int n) {
    int dp[n][n];

    // Initialize dp table
    for (int i = 1; i < n; i++) 
	{
        dp[i][i] = 0; // Single matrix cost is 0
    }

    // d is chain length
    for (int d = 2; d < n; d++) 
	{
        for (int i = 1; i < n - d + 1; i++) 
		{
            int j = i + d - 1;
            dp[i][j] = 99999;

            for (int k = i; k < j; k++) 
			{
                int cost = dp[i][k] + dp[k+1][j] + arr[i-1]*arr[k]*arr[j];
                if (cost < dp[i][j]) 
				{
                    dp[i][j] = cost;
                }
            }
        }
    }

    // Print DP table
    printf("\nDP Table:\n");
    for (int i = 1; i < n; i++) 
	{
        for (int j = 1; j < n; j++) 
		{
            if (i > j) 
			{
                printf("  -  "); // if invalid
            } 
			else 
			{
                printf("%6d", dp[i][j]);
            }
        }
        printf("\n");
    }

    return dp[1][n-1];
}

int main() 
{
    int n;

    printf("Enter the number of matrices: ");
    scanf("%d", &n);

    int arr[n + 1];

    printf("Enter the dimensions:\n");
    for (int i = 0; i <= n; i++) 
	{
        scanf("%d", &arr[i]);
    }

    int minCost = matrixChainMultiplication(arr, n + 1);

    printf("\nMinimum number of multiplications is: %d\n", minCost);
    return 0;
}
