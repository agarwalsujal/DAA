#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

// Function to find set of an element (uses path compression)
int find(struct Subset subsets[], int i) 
{
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to do union of two sets (uses union by rank)
void Union(struct Subset subsets[], int x, int y) 
{
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else 
	{
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Comparator for sorting edges by weight
int compare(const void* a, const void* b) 
{
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

// Kruskal's Algorithm
void kruskal(struct Edge edges[], int V, int E) 
{
    struct Subset subsets[MAX];
    struct Edge result[MAX]; // Store MST edges
    int e = 0; // Index for result[]
    int i = 0; // Index for sorted edges
    int totalCost = 0;

    // Initialize subsets
    for (int v = 0; v < V; v++) 
	{
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Sort all the edges
    qsort(edges, E, sizeof(edges[0]), compare);

    while (e < V - 1 && i < E) 
	{
        struct Edge next = edges[i++];

        int x = find(subsets, next.src);
        int y = find(subsets, next.dest);

        if (x != y) 
		{
            result[e++] = next;
            Union(subsets, x, y);
            totalCost += next.weight;
        }
    }

    printf("\nEdge \tWeight\n");
    for (i = 0; i < e; i++)
        printf("%d - %d \t%d\n", result[i].src, result[i].dest, result[i].weight);
    printf("Total Minimum Cost = %d\n", totalCost);
}

int main() 
{
    int V, E;
    struct Edge edges[MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &V);

    printf("Enter number of edges: ");
    scanf("%d", &E);

    printf("Enter each edge as: source destination weight\n");
    for (int i = 0; i < E; i++) 
	{
        scanf("%d%d%d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }

    kruskal(edges, V, E);

    return 0;
}
